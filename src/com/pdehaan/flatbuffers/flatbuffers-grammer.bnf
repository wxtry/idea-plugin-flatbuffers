{
    parserClass="com.pdehaan.flatbuffers.parser.FlatbuffersParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Flatbuffers"
    psiImplClassSuffix="Impl"
    psiPackage="com.pdehaan.flatbuffers.psi"
    psiImplPackage="com.pdehaan.flatbuffers.psi.impl"

    elementTypeHolderClass="com.pdehaan.flatbuffers.psi.FlatbuffersTypes"
    elementTypeClass="com.pdehaan.flatbuffers.psi.FlatbuffersElementType"
    tokenTypeClass="com.pdehaan.flatbuffers.psi.FlatbuffersTokenType"
}

schema ::= include_decl *
    ( namespace_decl
    | type_decl
    | enum_decl
    | root_decl
    | file_extension_decl
    | file_identifier_decl
    | attribute_decl
    ) *

private item_ ::= COMMENT

include_decl ::= INCLUDE STRING_LITERAL SEMICOLON

namespace_decl ::= NAMESPACE IDENTIFIER ( DOT IDENTIFIER ) * SEMICOLON

attribute_decl ::= ATTRIBUTE STRING_LITERAL SEMICOLON

type_decl ::= ( TABLE | STRUCT ) type_decl_name metadata OPEN_BLOCK field_decl * CLOSE_BLOCK

enum_decl ::= ( ENUM | UNION ) type_decl_name [ COLON type ] metadata OPEN_BLOCK [ enumval_decl ( COMMA enumval_decl ) * ] CLOSE_BLOCK

type_decl_name ::= IDENTIFIER

root_decl ::= ROOT_TYPE IDENTIFIER SEMICOLON

field_decl ::= field_name COLON type [ EQUAL INTEGER_LITERAL ] metadata SEMICOLON

field_name ::= IDENTIFIER

builtin_type ::= BOOL | BYTE | UBYTE | SHORT | USHORT | INT | UINT | FLOAT | LONG | ULONG | DOUBLE | STRING

type ::= builtin_type | OPEN_BRACE type CLOSE_BRACE | custom_type

custom_type ::= IDENTIFIER

enumval_decl ::= IDENTIFIER [ EQUAL INTEGER_LITERAL ]

metadata ::= [ OPEN_PARENTHESIS [ metadata_part ( COMMA metadata_part ) * ] CLOSE_PARENTHESIS ]

metadata_part ::= IDENTIFIER [ COLON single_value ]

scalar ::= INTEGER_LITERAL | FLOAT_LITERAL | TRUE | FALSE

object ::=  [ object_part ( COMMA object_part ) * ]

object_part ::= IDENTIFIER COLON value

single_value ::= scalar | STRING_LITERAL

value ::= single_value | object | OPEN_BRACE [ value ( COMMA value ) * ] CLOSE_BRACE

file_extension_decl ::= FILE_EXTENSION STRING_LITERAL SEMICOLON

file_identifier_decl ::= FILE_IDENTIFIER STRING_LITERAL SEMICOLON
